import { UnpluginContextMeta } from "unplugin";
import { placeholder, uniqueVariableName, virtualFile } from "../../shared";
import { withholdViteBuiltInEnv } from "./vite/withhold-built-in-env";

export function transformProd({
  code,
  id,
  meta,
}: {
  code: string;
  id: string;
  meta: UnpluginContextMeta;
}) {
  if (id !== virtualFile && id.includes("node_modules") === false) {
    switch (meta.framework) {
      case "webpack":
        code = code.replace(/import\.meta\.env/g, `(${placeholder})`);
        break;

      default:
        if (isTransformingJs(code, id) || isTransformingTs(code, id)) {
          code =
            `import ${uniqueVariableName} from '${virtualFile}';\n` +
            code.replace(
              `import ${uniqueVariableName} from '${virtualFile}';\n`,
              ""
            );
        } else if (isTransformingVue(code, id)) {
          code = code.replace(
            /(\<script.*?\>)/,
            `$1\nimport ${uniqueVariableName} from '${virtualFile}';`
          );
        } else if (isTransformingSvelte(code, id)) {
          if (
            code.includes(
              "<!-- This file is generated by @sveltejs/kit â€” do not edit it! -->"
            )
          ) {
            // ignore
          } else if (code.includes("<script")) {
            code = code.replace(
              /(\<script.*?\>)/,
              `$1\nimport ${uniqueVariableName} from '${virtualFile}';`
            );
          } else if (code.includes("generated by Svelte")) {
            // https://github.com/sveltejs/svelte/blob/e2adf6a211ed7993a79c4745bc1724a6e57aac51/src/compiler/compile/Component.ts#L270
            code =
              `import ${uniqueVariableName} from '${virtualFile}';\n` +
              code.replace(
                `import ${uniqueVariableName} from '${virtualFile}';\n`,
                ""
              );
          }
        }

        code = code.replace(/import\.meta\.env/g, uniqueVariableName);

        code = withholdViteBuiltInEnv(code);
        break;
    }
  }

  return code;
}

const isTransformingJs = (code: string, id: string) =>
  [".js", ".jsx"].some((ext) => id.endsWith(ext)) &&
  id.includes("?vue&type=template") === false;

const isTransformingTs = (code: string, id: string) =>
  [".ts", ".tsx"].some((ext) => id.endsWith(ext)) &&
  id.includes("?vue&type=template") === false;

const isTransformingVue = (code: string, id: string) =>
  id.endsWith(".vue") ||
  id.includes("?vue&type=template") ||
  id.includes("?vue&type=script");

const isTransformingSvelte = (code: string, id: string) =>
  id.endsWith(".svelte");
